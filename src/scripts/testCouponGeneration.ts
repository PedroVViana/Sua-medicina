import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { firebaseConfig } from '../lib/firebase';
import { sellerCouponService } from '../services/sellerCouponService';

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Fun√ß√£o para testar a gera√ß√£o de c√≥digos
async function testCouponGeneration() {
  console.log('üß™ Testando gera√ß√£o de c√≥digos de cupom...');
  
  try {
    // Testar gera√ß√£o de c√≥digos √∫nicos
    const testCodes: string[] = [];
    const numTests = 10;
    
    console.log(`\nGerando ${numTests} c√≥digos de teste...`);
    
    for (let i = 0; i < numTests; i++) {
      const code = sellerCouponService.generateRandomCode();
      testCodes.push(code);
      console.log(`C√≥digo ${i + 1}: ${code}`);
    }
    
    // Verificar se todos os c√≥digos s√£o √∫nicos
    const uniqueCodes = new Set(testCodes);
    const isUnique = uniqueCodes.size === testCodes.length;
    
    console.log(`\n‚úÖ C√≥digos √∫nicos: ${isUnique ? 'SIM' : 'N√ÉO'}`);
    console.log(`üìä Total de c√≥digos: ${testCodes.length}`);
    console.log(`üîç C√≥digos √∫nicos: ${uniqueCodes.size}`);
    
    // Verificar formato dos c√≥digos
    const formatValid = testCodes.every(code => {
      const has3Letters = /[A-Z]{3}/.test(code);
      const has3Numbers = /\d{3}/.test(code);
      const is6Chars = code.length === 6;
      return has3Letters && has3Numbers && is6Chars;
    });
    
    console.log(`\n‚úÖ Formato correto: ${formatValid ? 'SIM' : 'N√ÉO'}`);
    
    if (formatValid) {
      console.log('üìù Todos os c√≥digos seguem o padr√£o: 3 letras + 3 n√∫meros');
    }
    
    // Mostrar exemplos de c√≥digos
    console.log('\nüìã Exemplos de c√≥digos gerados:');
    testCodes.slice(0, 5).forEach((code, index) => {
      console.log(`  ${index + 1}. ${code}`);
    });
    
    // Testar verifica√ß√£o de unicidade (simulado)
    console.log('\nüîç Testando verifica√ß√£o de unicidade...');
    const sampleCode = testCodes[0];
    console.log(`C√≥digo de exemplo: ${sampleCode}`);
    
    // Simular verifica√ß√£o (sem acessar o banco)
    console.log('‚ÑπÔ∏è  Verifica√ß√£o de unicidade seria feita no banco de dados');
    
    console.log('\n‚ú® Teste conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Fun√ß√£o para testar a gera√ß√£o de c√≥digos √∫nicos (com banco)
async function testUniqueCodeGeneration() {
  console.log('\nüöÄ Testando gera√ß√£o de c√≥digos √∫nicos no banco...');
  
  try {
    // Criar um vendedor de teste tempor√°rio
    const testSellerId = 'test-seller-' + Date.now();
    
    console.log(`\nCriando cupom de teste para vendedor: ${testSellerId}`);
    
    // Gerar c√≥digo √∫nico
    const uniqueCode = await sellerCouponService.generateCouponCode(testSellerId);
    console.log(`‚úÖ C√≥digo √∫nico gerado: ${uniqueCode}`);
    
    // Verificar se o c√≥digo √© √∫nico
    const isUnique = await sellerCouponService.isCodeUnique(uniqueCode);
    console.log(`üîç C√≥digo √© √∫nico: ${isUnique ? 'SIM' : 'N√ÉO'}`);
    
    // Tentar gerar outro c√≥digo
    const secondCode = await sellerCouponService.generateCouponCode(testSellerId);
    console.log(`‚úÖ Segundo c√≥digo √∫nico gerado: ${secondCode}`);
    
    // Verificar se s√£o diferentes
    const areDifferent = uniqueCode !== secondCode;
    console.log(`üîç C√≥digos s√£o diferentes: ${areDifferent ? 'SIM' : 'N√ÉO'}`);
    
    console.log('\n‚ú® Teste de unicidade conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste de unicidade:', error);
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üéØ Iniciando testes do sistema de cupons...\n');
  
  // Teste b√°sico de gera√ß√£o
  await testCouponGeneration();
  
  // Teste de unicidade (opcional - requer conex√£o com banco)
  console.log('\n' + '='.repeat(50));
  console.log('‚ö†Ô∏è  O pr√≥ximo teste requer conex√£o com o banco de dados');
  console.log('='.repeat(50));
  
  const shouldTestUniqueness = process.argv.includes('--test-uniqueness');
  
  if (shouldTestUniqueness) {
    await testUniqueCodeGeneration();
  } else {
    console.log('\nüí° Para testar a unicidade no banco, execute:');
    console.log('   npm run test:coupons -- --test-uniqueness');
  }
  
  console.log('\nüéâ Todos os testes conclu√≠dos!');
}

// Executar se o script for chamado diretamente
if (require.main === module) {
  main().then(() => {
    process.exit(0);
  }).catch((error) => {
    console.error('Erro fatal:', error);
    process.exit(1);
  });
}

export { testCouponGeneration, testUniqueCodeGeneration };
