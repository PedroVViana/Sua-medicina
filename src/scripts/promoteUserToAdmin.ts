import { doc, updateDoc, getDoc } from 'firebase/firestore';
import { db } from '../lib/firebase';

const USERS_COLLECTION = 'users';

/**
 * Promove um usu√°rio comum para administrador
 * @param userId - ID do usu√°rio a ser promovido
 * @returns Promise<boolean> - true se sucesso, false se falhou
 */
export const promoteUserToAdmin = async (userId: string): Promise<boolean> => {
  try {
    console.log(`üîÑ Promovendo usu√°rio ${userId} para administrador...`);
    
    // Verificar se o usu√°rio existe
    const userRef = doc(db, USERS_COLLECTION, userId);
    const userDoc = await getDoc(userRef);
    
    if (!userDoc.exists()) {
      console.error('‚ùå Usu√°rio n√£o encontrado');
      return false;
    }
    
    const userData = userDoc.data();
    console.log('üìã Dados atuais do usu√°rio:', userData);
    
    // Atualizar role para admin
    await updateDoc(userRef, {
      role: 'admin'
    });
    
    console.log('‚úÖ Usu√°rio promovido para administrador com sucesso!');
    console.log('‚ÑπÔ∏è O usu√°rio precisar√° fazer logout e login novamente para que as altera√ß√µes tenham efeito.');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao promover usu√°rio:', error);
    return false;
  }
};

/**
 * Busca usu√°rio por email e promove para admin
 * @param email - Email do usu√°rio
 * @returns Promise<boolean> - true se sucesso, false se falhou
 */
export const promoteUserByEmail = async (email: string): Promise<boolean> => {
  try {
    console.log(`üîç Buscando usu√°rio com email: ${email}`);
    
    // Nota: Esta fun√ß√£o seria mais eficiente com um √≠ndice no email
    // Por simplicidade, vamos buscar todos os usu√°rios e filtrar
    // Em produ√ß√£o, considere criar um √≠ndice ou usar Firebase Admin SDK
    
    console.log('‚ÑπÔ∏è Para promover um usu√°rio por email, voc√™ precisa:');
    console.log('1. Ir ao Firebase Console > Authentication');
    console.log('2. Encontrar o usu√°rio pelo email');
    console.log('3. Copiar o User UID');
    console.log('4. Usar a fun√ß√£o promoteUserToAdmin(uid)');
    
    return false;
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rio:', error);
    return false;
  }
};

// Fun√ß√£o para uso no console do navegador
declare global {
  interface Window {
    promoteToAdmin: (userId: string) => Promise<boolean>;
    promoteByEmail: (email: string) => Promise<boolean>;
  }
}

// Disponibilizar fun√ß√µes globalmente para debug
if (typeof window !== 'undefined') {
  window.promoteToAdmin = promoteUserToAdmin;
  window.promoteByEmail = promoteUserByEmail;
}
